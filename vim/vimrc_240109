" 文字コードしてい
set fenc=utf-8
" 挿入モードでバックスペースで削除
set backspace=indent,eol,start
" wildmenu
set wildmenu

"-----------------------------------------------------
" 検索設定
"-----------------------------------------------------

" 検索時、大文字小文字を区別しない
set ignorecase
" 検索結果をハイライト
set hlsearch

"------------------------------------------------------
" 表示設定
"------------------------------------------------------
" 対応するカッコやブレースを表示
set showmatch matchtime=1
" ステータス行を常に表示
set laststatus=2
" 行末スペース表示
set listchars=tab:^\ ,trail:~
" コマンドライン履歴を10000件保存
set history=10000
" コメントの色を水色
hi Comment ctermfg=3
" インデント幅
set tabstop=4
set shiftwidth=4
" yでコピーしたときにクリップボードに入れる
set guioptions+=a
" 改行に入力された行の末尾に合わせて次の行のインデントを増減する
set smartindent
" タイトル表示
set title
" 行番号
set number
" タブ、空白、改行の可視化
set list
" ヤンクでクリップボードのコピー
set clipboard=unnamed,autoselect
" シンタックスハイライト
syntax on
" ○や□文字が重ならないように
set ambiwidth=double

" カーソルを行末の一つ先まで移動可能に
set virtualedit=onemore
" 自動インデント
set autoindent





" ===========================================================================




call plug#begin()
  Plug 'mattn/emmet-vim'
  Plug 'Shougo/ddc.vim'
  Plug 'Shougo/pum.vim'
  Plug 'vim-denops/denops.vim'
  Plug 'Shougo/ddc-around'
  Plug 'LumaKernel/ddc-file'
  Plug 'Shougo/ddc-matcher_head'
  Plug 'Shougo/ddc-sorter_rank'
  Plug 'Shougo/ddc-converter_remove_overlap'
  Plug 'shun/ddc-vim-lsp'
  Plug 'mattn/vim-lsp-settings'
  Plug 'prabirshrestha/vim-lsp'
  Plug 'preservim/nerdtree'
  Plug 'shougo/ddc-ui-native'
call plug#end()

call ddc#custom#patch_global('ui', ['native'])
call ddc#custom#patch_global('sources', [
      \ 'around',
      \ 'vim-lsp',
      \ 'file'
      \ ])
call ddc#custom#patch_global('sourceOptions', {
      \ '_': {
      \     'matchers': ['matcher_head'],
      \     'sorters': ['sorter_rank'],
      \     'converters': ['converter_remove_overlap'],
      \ },
      \ 'around': {'mark': 'Around'},
      \ 'vim-lsp': {
      \   'mark': 'LSP',
      \   'matchers': ['matcher_head'],
      \ },
      \ 'file': {
      \   'mark': 'file',
      \   'isVolatile': v:true,
      \ }})
call ddc#custom#patch_global('sourceParams', {
	\ 'around': {'maxSize': 100},
\ })

call ddc#enable()

inoremap <Tab> <Cmd>call pum#map#insert_relative(+1)<CR>
inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>

if &compatible
        set nocompatible
endif

" vim-lsp
" デバッグ用設定
let g:lsp_log_verbose = 1  " デバッグ用ログを出力
let g:lsp_log_file = expand('~/.cache/tmp/vim-lsp.log')  " ログ出力のPATHを設定

" 言語用Serverの設定
augroup MyLsp
  autocmd!
  " pip install python-language-server
  if executable('pylsp')
    " Python用の設定を記載
    " workspace_configで以下の設定を記載
    " - pycodestyleの設定はALEと重複するので無効にする
    " - jediの定義ジャンプで一部無効になっている設定を有効化
    autocmd User lsp_setup call lsp#register_server({
        \ 'name': 'pylsp',
        \ 'cmd': { server_info -> ['pylsp'] },
        \ 'whitelist': ['python'],
        \ 'workspace_config': {'pylsp': {'plugins': {
        \   'pycodestyle': {'enabled': v:false},
        \   'jedi_definition': {'follow_imports': v:true, 'follow_builtin_imports': v:true},}}}
        \})
   autocmd FileType python call s:configure_lsp()
  endif
augroup END
" 言語ごとにServerが実行されたらする設定を関数化
function! s:configure_lsp() abort
  setlocal omnifunc=lsp#complete   " オムニ補完を有効化
  " LSP用にマッピング
  nnoremap <buffer> <C-]> :<C-u>LspDefinition<CR>
  nnoremap <buffer> gd :<C-u>LspDefinition<CR>
  nnoremap <buffer> gD :<C-u>LspReferences<CR>
  nnoremap <buffer> gs :<C-u>LspDocumentSymbol<CR>
  nnoremap <buffer> gS :<C-u>LspWorkspaceSymbol<CR>
  nnoremap <buffer> gQ :<C-u>LspDocumentFormat<CR>
  vnoremap <buffer> gQ :LspDocumentRangeFormat<CR>
  nnoremap <buffer> K :<C-u>LspHover<CR>
  nnoremap <buffer> <F1> :<C-u>LspImplementation<CR>
  nnoremap <buffer> <F2> :<C-u>LspRename<CR>
endfunction
let g:lsp_diagnostics_enabled = 0  " 警告やエラーの表示はALEに任せるのでOFFにする


 " <TAB>: completion.
inoremap <silent><expr> <TAB>
\ ddc#map#pum_visible() ? '<C-n>' :
\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
\ '<TAB>' : ddc#map#manual_complete()

" <S-TAB>: completion back.
inoremap <expr><S-TAB>  ddc#map#pum_visible() ? '<C-p>' : '<C-h>'



nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>
"autocmd VimEnter * NERDTree
"autocmd VimEnter * NERDTree | wincmd p
